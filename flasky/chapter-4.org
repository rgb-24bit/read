#+TITLE:      Chapter 4
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Tag: 4a
  新的扩展： ~flask_wtf~. 提供 ~wtform~ 的支持。

  #+BEGIN_SRC python
    ...

    from flask_wtf import FlaskForm
    from wtforms import StringField, SubmitField
    from wtforms.validators import DataRequired

    ...

    class NameForm(FlaskForm):
        name = StringField('What is your name?', validators=[DataRequired()])
        submit = SubmitField('Submit')

    ...

    @app.route('/', methods=['GET', 'POST'])
    def index():
        name = None
        form = NameForm()
        if form.validate_on_submit():
            name = form.name.data
            form.name.data = ''
        return render_template('index.html', form=form, name=name)
  #+END_SRC

  构造了 ~Form~ 实例后是可以多数据进行设置后在渲染模板的。

  *base.html*:
  #+BEGIN_SRC html
    {% extends "bootstrap/base.html" %}
  #+END_SRC

  *index.html*:
  #+BEGIN_SRC html
    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %}

    ...

    {{ wtf.quick_form(form) }}
  #+END_SRC

  还可以 ~import~.

  ~wtf.quick_form(form)~ 使用了 ~flask-bootstrap~ 扩展来快速渲染表单。

* Tag: 4b
  新的重要功能： ~session~
  #+BEGIN_SRC python
    from flask import ..., session, ...

    ...

    @app.route('/', methods=['GET', 'POST'])
    def index():
        ...
        if form.validate_on_submit():
            ...
            session['name'] = form.name.data
        return render_template('index.html', form=form, name=session.get('name'))
  #+END_SRC
  
  感觉模板部分应该有对应的操作：
  #+BEGIN_SRC html
    <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>
  #+END_SRC

  感觉这里最重要的就是关于 ~session~ 的概念了。

  这方面还没了解过， 简单的 ~Google~ 了一下：
  1. ~session~ 是在 *服务器* 端对用户信息进行保存的一种数据结构， 可能有多种保存方式
  2. ~cookie~ 是在 *客户端* 对信息进行的保存

  + [[https://www.zhihu.com/question/19786827][COOKIE和SESSION有什么区别？ - 知乎]]

* Tag: 4c
  消息闪现 ~flash~
  #+BEGIN_SRC python
    from flask import ..., flash

    ...

    @app.route('/', methods=['GET', 'POST'])
    def index():
        form = NameForm()
        if form.validate_on_submit():
            old_name = session.get('name')
            if old_name is not None and old_name != form.name.data:
                flash('Looks like you have changed your name!')
            session['name'] = form.name.data
            return redirect(url_for('index'))
        return render_template('index.html', form=form, name=session.get('name'))
  #+END_SRC

  模板部分的对应操作：
  #+BEGIN_SRC html
    {% for message in get_flashed_messages() %}
        <div class="alert alert-warning">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            {{ message }}
        </div>
    {% endfor %}
  #+END_SRC
  
  [[http://flask.pocoo.org/docs/1.0/quickstart/#message-flashing][Message Flashing]].

* Summary
  1. 使用 ~flask_wtf~:
     + [[https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms][web forms]]

  2. 设置请求方法：
     #+BEGIN_SRC python
       @app.route('/', methods=['GET', 'POST'])
       def index():
           ...
     #+END_SRC

  3. 使用 ~session~:
     #+BEGIN_SRC python
       from flask import session

       session[key] = val
     #+END_SRC

  4. 使用 ~flash~:
     #+BEGIN_SRC python
       flash('Looks like you have changed your name!')
     #+END_SRC

     #+BEGIN_SRC html
       {% for message in get_flashed_messages() %}
       <div class="alert alert-warning">
         <button type="button" class="close" data-dismiss="alert">&times;</button>
         {{ message }}
       </div>
       {% endfor %}
     #+END_SRC

  5. 使用 ~redirect~:
     #+BEGIN_SRC python
       return redirect(url_for('index'))
     #+END_SRC

     + Update 2018-04-23 :: 当初还做了笔记的 /QAQ/, 这次写代码的时候使用 ~redirect~ 出现了错误。

          首先， 每个路由都应该有返回的响应信息。 而 ~redirect~ 不会自动跳转到某个链接， 而更像是获取那个链接
          的内容并返回。

          一次使用 ~redirect~ 应该是 ~return redirect~. 另外， ~redirect~ 的参数最好用 ~url_for~ 进行生成， 不然可能会重定向到
          不存在的页面。

