#+TITLE:      proxy
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#文档][文档]]
- [[#代码][代码]]
- [[#输出][输出]]
- [[#理解][理解]]

* 文档
  #+BEGIN_SRC python
    """
    *TL;DR80
    Provides an interface to resource that is expensive to duplicate.
    """
  #+END_SRC
  
* 代码
  #+BEGIN_SRC python
    from __future__ import print_function
    import time


    class SalesManager:
        def talk(self):
            print("Sales Manager ready to talk")


    class Proxy:
        def __init__(self):
            self.busy = 'No'
            self.sales = None

        def talk(self):
            print("Proxy checking for Sales Manager availability")
            if self.busy == 'No':
                self.sales = SalesManager()
                time.sleep(0.1)
                self.sales.talk()
            else:
                time.sleep(0.1)
                print("Sales Manager is busy")


    class NoTalkProxy(Proxy):
        def talk(self):
            print("Proxy checking for Sales Manager availability")
            time.sleep(0.1)
            print("This Sales Manager will not talk to you",
                  "whether he/she is busy or not")


    if __name__ == '__main__':
        p = Proxy()
        p.talk()
        p.busy = 'Yes'
        p.talk()
        p = NoTalkProxy()
        p.talk()
        p.busy = 'Yes'
        p.talk()
  #+END_SRC

* 输出
  #+BEGIN_EXAMPLE
    ### OUTPUT ###
    # Proxy checking for Sales Manager availability
    # Sales Manager ready to talk
    # Proxy checking for Sales Manager availability
    # Sales Manager is busy
    # Proxy checking for Sales Manager availability
    # This Sales Manager will not talk to you whether he/she is busy or not
    # Proxy checking for Sales Manager availability
    # This Sales Manager will not talk to you whether he/she is busy or not
  #+END_EXAMPLE

* 理解
  *代理模式* 还是比较好理解的， 使用一个类别作为其他东西的接口。

  示例代码通过 *代理类* 作为 *SalesManager* 的接口， 我们通过操作接口间接的操作对象。

  #+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    class WebSite(object):
        def connect(self):
            print('connect to website.')


    class Proxy(object):
        def __init__(self):
            self.website = None

        def connect(self):
            print('Proxy connect to website.')
            if self.website is None:
                self.website = WebSite()
            self.website.connect()


    if __name__ == '__main__':
        p = Proxy()
        p.connect()
  #+END_SRC

  执行结果：
  #+BEGIN_EXAMPLE
    Proxy connect to website.
    connect to website.
  #+END_EXAMPLE

