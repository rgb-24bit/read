#+TITLE:      factory method
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#文档][文档]]
- [[#代码][代码]]
- [[#输出][输出]]
- [[#理解][理解]]

* 文档
  #+BEGIN_SRC python
    """*What is this pattern about?
    The Factory Method pattern can be used to create an interface for a
    method, leaving the implementation to the class that gets
    instantiated.

    *What does this example do?
    The code shows a way to localize words in two languages: English and
    Greek. "getLocalizer" is the factory method that constructs a
    localizer depending on the language chosen. The localizer object will
    be an instance from a different class according to the language
    localized. However, the main code does not have to worry about which
    localizer will be instantiated, since the method "get" will be called
    in the same way independently of the language.

    *Where can the pattern be used practically?
    The Factory Method can be seen in the popular web framework Django:
    http://django.wikispaces.asu.edu/*NEW*+Django+Design+Patterns For
    example, in a contact form of a web page, the subject and the message
    fields are created using the same form factory (CharField()), even
    though they have different implementations according to their
    purposes.

    *References:
    http://ginstrom.com/scribbles/2007/10/08/design-patterns-python-style/
    https://fkromer.github.io/python-pattern-references/design/#factory-method
    https://sourcemaking.com/design_patterns/factory_method

    *TL;DR80
    Creates objects without having to specify the exact class.
    """
  #+END_SRC
  
  *References*:
  + http://ginstrom.com/scribbles/2007/10/08/design-patterns-python-style/
  + https://fkromer.github.io/python-pattern-references/design/#factory-method
  + https://sourcemaking.com/design_patterns/factory_method

* 代码
  #+BEGIN_SRC python
    class GreekGetter(object):

        """A simple localizer a la gettext"""

        def __init__(self):
            self.trans = dict(dog="σκύλος", cat="γάτα")

        def get(self, msgid):
            """We'll punt if we don't have a translation"""
            return self.trans.get(msgid, str(msgid))


    class EnglishGetter(object):

        """Simply echoes the msg ids"""

        def get(self, msgid):
            return str(msgid)


    def get_localizer(language="English"):
        """The factory method"""
        languages = dict(English=EnglishGetter, Greek=GreekGetter)
        return languages[language]()


    if __name__ == '__main__':
        # Create our localizers
        e, g = get_localizer(language="English"), get_localizer(language="Greek")
        # Localize some text
        for msgid in "dog parrot cat bear".split():
            print(e.get(msgid), g.get(msgid))
  #+END_SRC

* 输出
  #+BEGIN_EXAMPLE
    ### OUTPUT ###
    # dog σκύλος
    # parrot parrot
    # cat γάτα
    # bear bear
  #+END_EXAMPLE

* 理解
  目测我对 *工厂方法* 和 *抽象工厂* 两个模式搞混了......

  和 *抽象工厂* 不同， *工厂方法* 的定义是： 定义一个创建对象的接口，
  但让实现这个接口的类（方法）来决定实例化哪个类。

  最最重要的是： *工厂方法* 返回的对象是 *对象实例*, 调用者可以 *直接* 调用对象的接口。

  下面这段代码的输出和 [[file:abstract_factory.org::%E7%90%86%E8%A7%A3][抽象工厂]] 中的代码的输出一样， 但是两者调用模式明显不同：

  #+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    def create_repository(vc_type, path):
        """abstract factory used to create repository."""
        vc = {'git': Git, 'svn': Svn}
        return vc[vc_type](path)


    class Git(object):
        def __init__(self, path):
            self.path = path

        def __repr__(self):
            return 'git repository: ' + self.path


    class Svn(object):
        def __init__(self, path):
            self.path = path

        def __repr__(self):
            return 'svn repository: ' + self.path


    if __name__ == '__main__':
        repository = create_repository('git', '~/abstract-factory')
        print(repository)

        repository = create_repository('svn', '~/abstract-factory')
        print(repository)
  #+END_SRC

  执行结果：
  #+BEGIN_EXAMPLE
    git repository: ~/abstract-factory
    svn repository: ~/abstract-factory
  #+END_EXAMPLE
  
