#+TITLE:      composite
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#文档][文档]]
- [[#代码][代码]]
- [[#输出][输出]]
- [[#理解][理解]]

* 文档
  #+BEGIN_SRC python
    """
    *What is this pattern about?
    The composite pattern describes a group of objects that is treated the
    same way as a single instance of the same type of object. The intent of
    a composite is to "compose" objects into tree structures to represent
    part-whole hierarchies. Implementing the composite pattern lets clients
    treat individual objects and compositions uniformly.

    *What does this example do?
    The example implements a graphic class，which can be either an ellipse
    or a composition of several graphics. Every graphic can be printed.

    *Where is the pattern used practically?
    In graphics editors a shape can be basic or complex. An example of a
    simple shape is a line, where a complex shape is a rectangle which is
    made of four line objects. Since shapes have many operations in common
    such as rendering the shape to screen, and since shapes follow a
    part-whole hierarchy, composite pattern can be used to enable the
    program to deal with all shapes uniformly.

    *References:
    https://en.wikipedia.org/wiki/Composite_pattern
    https://infinitescript.com/2014/10/the-23-gang-of-three-design-patterns/

    *TL;DR80
    Describes a group of objects that is treated as a single instance.
    """
  #+END_SRC
  
  *References*:
  + https://en.wikipedia.org/wiki/Composite_pattern
  + https://infinitescript.com/2014/10/the-23-gang-of-three-design-patterns/

* 代码
  #+BEGIN_SRC python
    class Graphic:
        def render(self):
            raise NotImplementedError("You should implement this.")


    class CompositeGraphic(Graphic):
        def __init__(self):
            self.graphics = []

        def render(self):
            for graphic in self.graphics:
                graphic.render()

        def add(self, graphic):
            self.graphics.append(graphic)

        def remove(self, graphic):
            self.graphics.remove(graphic)


    class Ellipse(Graphic):
        def __init__(self, name):
            self.name = name

        def render(self):
            print("Ellipse: {}".format(self.name))


    if __name__ == '__main__':
        ellipse1 = Ellipse("1")
        ellipse2 = Ellipse("2")
        ellipse3 = Ellipse("3")
        ellipse4 = Ellipse("4")

        graphic1 = CompositeGraphic()
        graphic2 = CompositeGraphic()

        graphic1.add(ellipse1)
        graphic1.add(ellipse2)
        graphic1.add(ellipse3)
        graphic2.add(ellipse4)

        graphic = CompositeGraphic()

        graphic.add(graphic1)
        graphic.add(graphic2)

        graphic.render()
  #+END_SRC

* 输出
  #+BEGIN_EXAMPLE
    ### OUTPUT ###
    # Ellipse: 1
    # Ellipse: 2
    # Ellipse: 3
    # Ellipse: 4
  #+END_EXAMPLE

* 理解
  *组合模式* 将一组相似的对象当作一个单一的对象来处理。

  组合模式依据 *树形结构* 来组合对象， 用来表示部分以及整体层次

  示例代码中， 将多个 ~Ellipse~ 组合在一起， 使得操作 ~graphic~ 如同同时操作多个 ~Ellipse~.

  同时， 使用组合模式可以用来表示对象之间的层次结构。

  #+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    class Employee(object):
        def __init__(self, name, dept, salary):
            self.name = name
            self.dept = dept
            self.salary = salary
            self.subordinates = set()

        def add(self, e):
            self.subordinates.add(e)

        def remove(self, e):
            self.subordinates.remove(e)

        def show(self):
            print("Employee: %s-%s-%s" % (self.name, self.dept, self.salary))
            for employee in self.subordinates:
                employee.show()


    if __name__ == '__main__':
        CEO = Employee("John","CEO", 30000)

        head_sales = Employee("Robert","Head Sales", 20000)

        head_marketing = Employee("Michel","Head Marketing", 20000);

        clerk1 = Employee("Laura","Marketing", 10000)
        clerk2 = Employee("Bob","Marketing", 10000)

        sales_executive1 = Employee("Richard","Sales", 10000)
        sales_executive2 = Employee("Rob","Sales", 10000)

        CEO.add(head_sales)
        CEO.add(head_marketing)

        head_sales.add(sales_executive1)
        head_sales.add(sales_executive2)

        head_marketing.add(clerk1)
        head_marketing.add(clerk2)

        CEO.show()
  #+END_SRC

  执行结果：
  #+BEGIN_EXAMPLE
    Employee: John-CEO-30000
    Employee: Robert-Head Sales-20000
    Employee: Richard-Sales-10000
    Employee: Rob-Sales-10000
    Employee: Michel-Head Marketing-20000
    Employee: Bob-Marketing-10000
    Employee: Laura-Marketing-10000
  #+END_EXAMPLE

