#+TITLE:      2021

* 目录                                                    :TOC_4_gh:noexport:
- [[#m01][M01]]

* M01
  ☞ [[https://mp.weixin.qq.com/s/AkCFvCiP7md7pKBN6_8pmw][为什么苹果 M1 芯片如此之快？]]
  
  1) M1 不是 CPU，它是一个集成了多个芯片的整体系统
  2) 如今摩尔定律已经失效，通过「快速执行更多指令」来提升 CPU 性能已经很难，因此，我们所能做的只能是「并行执行」尽可能多的指令
  3) 并行执行大量指令的方法有两种：
     + 添加更多 CPU 核心，能够让计算机同时执行更多的任务，但是对于单个任务的性能提升有限，适合云服务
     + 通过乱序执行并行执行更多指令
  4) 为什么 AMD 和英特尔的乱序执行不如 M1？（见原文）

  -----

  ☞ [[https://mp.weixin.qq.com/s/yITNjo_UQi8-OKQNOfGrPw][C++ 服务编译耗时优化原理及实践]]

  1) C/C++ 的特点，头文件会在编译时展开，当大的头文件被频繁引用时，编译时长自然会增加很多。基于这一点，通过工具分析头文件的依赖关系，
     去掉不合理的部分，可以起到优化编译耗时的作用
     
  -----

  ☞ [[https://www.infoq.cn/article/Ov7prhrTiNw6JjhELmh6][4 种主流的 API 架构风格对比-InfoQ]]

  1) 四种 API 架构中接触的较多的是 RESTful 和 RPC，一个对外，一个对内
  2) GraphQL 有过了解，但没有使用过
  3) SOAP 似乎看到过，还以为这种结构都废弃了，但还是有其使用场景
  4) 每种架构都有其适合的场景，不能太过绝对的认为某一个架构由于另一个，同时，业界今年来的飞速发展，新的技术不断出现，
     只能说新的技术有其更适合的特化场景，不能说老技术就没价值了。

     根据业务场景选择适合的技术栈，而不是一味的追求新。

  -----

  ☞ [[https://blog.betacat.io/post/2020/03/a-pattern-for-writing-testable-go-code/][编写可测试 Go 代码的一种模式 - 喵叔没话说]]

  1) Go 语言的特性，或者说风格在部分场景下对于单测并不友好，这时如果一定要追求 100% 的覆盖率，那么，就不得不通过一些手段来替换自己的代码。

     这样的代码很丑，完全为了单测而编写的代码，比如需要测试的代码中存在 package.Func 时。

     另外，代码中存在 if err 也为编写单测带来了巨大的负担。

  2) Go Code Review 就指明了，Go 推荐在需要使用的地方定义接口，而不是先定义接口再去实现。

     Go 接口的实现和结构体的定义是割裂的，在只看到结构体的情况下你并不能知道它实现了什么接口，这时如果还遵循 Java 里面先接口后实现的模式，
     在代码量上来后，反而会为代码的维护和阅读带来额外的负担。

