#+TITLE:      utilities
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#contextmanager][contextmanager]]
- [[#symbol][symbol]]

* contextmanager
  #+BEGIN_SRC python
    try:
        from contextlib import contextmanager
    except ImportError:
        def contextmanager(fn):
            def oops(*args, **kw):
                raise RuntimeError("Python 2.5 or above is required to use "
                                   "context managers.")
            oops.__name__ = fn.__name__
            return oops
  #+END_SRC

  ~contextmanager~ 是一个很有用的 *装饰器*, 可以让我们省去编写 ~__enter__~ 和 ~__exit__~ 的工作。

* symbol
  #+BEGIN_SRC python
    class _symbol(object):

        def __init__(self, name):
            """Construct a new named symbol."""
            self.__name__ = self.name = name

        def __reduce__(self):
            return symbol, (self.name,)

        def __repr__(self):
            return self.name
    _symbol.__name__ = 'symbol'


    class symbol(object):
        """A constant symbol.
        >>> symbol('foo') is symbol('foo')
        True
        >>> symbol('foo')
        foo
        A slight refinement of the MAGICCOOKIE=object() pattern.  The primary
        advantage of symbol() is its repr().  They are also singletons.
        Repeated calls of symbol('name') will all return the same instance.
        """
        symbols = {}

        def __new__(cls, name):
            try:
                return cls.symbols[name]
            except KeyError:
                return cls.symbols.setdefault(name, _symbol(name))
  #+END_SRC

  魔法方法 ~__reduce__~ 之前看到过， 和 ~pickle~ 相关， 但由于没有接触过相关概念， 所以没在意。

  今天在看了一下， 发现， ~pickle~ 不就相当于 ~java~ 中的序列化么......

  使用 ~pickle~ 保存一个对象：
  #+BEGIN_SRC python
    import pickle

    data = {'foo': [1,2,3],
                    'bar': ('Hello', 'world!'),
                    'baz': True}
    jar = open('data.pkl', 'wb')
    pickle.dump(data, jar)
    jar.close()
  #+END_SRC

  还原对象：
  #+BEGIN_SRC python
    import pickle

    pkl_file = open('data.pkl', 'rb') 
    data = pickle.load(pkl_file) 
    print data
    pkl_file.close()
  #+END_SRC

  详细了解： [[http://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html#pickle][Pickle 你的对象]]

  除此之外的代码还是比较简单的， 使用相同参数实例化 ~symbol~ 会返回同一个对象。
