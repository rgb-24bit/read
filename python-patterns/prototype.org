#+TITLE:      prototype
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#文档][文档]]
- [[#代码][代码]]
- [[#输出][输出]]
- [[#理解][理解]]

* 文档
  #+BEGIN_SRC python
    """
    *TL;DR80
    Creates new object instances by cloning prototype.
    """
  #+END_SRC

* 代码
  #+BEGIN_SRC python
    class Prototype(object):

        value = 'default'

        def clone(self, **attrs):
            """Clone a prototype and update inner attributes dictionary"""
            # Python in Practice, Mark Summerfield
            obj = self.__class__()
            obj.__dict__.update(attrs)
            return obj


    class PrototypeDispatcher(object):

        def __init__(self):
            self._objects = {}

        def get_objects(self):
            """Get all objects"""
            return self._objects

        def register_object(self, name, obj):
            """Register an object"""
            self._objects[name] = obj

        def unregister_object(self, name):
            """Unregister an object"""
            del self._objects[name]


    def main():
        dispatcher = PrototypeDispatcher()
        prototype = Prototype()

        d = prototype.clone()
        a = prototype.clone(value='a-value', category='a')
        b = prototype.clone(value='b-value', is_checked=True)
        dispatcher.register_object('objecta', a)
        dispatcher.register_object('objectb', b)
        dispatcher.register_object('default', d)
        print([{n: p.value} for n, p in dispatcher.get_objects().items()])


    if __name__ == '__main__':
        main()
  #+END_SRC

* 输出
  #+BEGIN_EXAMPLE
    ### OUTPUT ###
    # [{'objectb': 'b-value'}, {'default': 'default'}, {'objecta': 'a-value'}]
  #+END_EXAMPLE

* 理解
  *原型模式* 很好理解， 文档也是创造性模式中最短的一个。

  特点是通过 *复制* 一个已经存在的实例来返回新的实例， 而不是新建实例。

  被复制的实例被称作 *原型*, 这个 *原型* 可以被定制。

  常用于创建复杂的或者耗时的实例。
  
  示例代码通过更新 ~Prototype~ 创建原型， 通过 ~PrototypeDispatcher~ 来官理原型。

  #+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    class Prototype(object):

        value = 'default'

        def clone(self, **kwargs):
            """Clone a prototype and update inner attributes dictionary"""
            # Python in Practice, Mark Summerfield
            obj = self.__class__()
            obj.__dict__.update(kwargs)
            return obj


    class PrototypeDispatcher(object):

        def __init__(self):
            self._objects = {}

        def get_object(self, name):
            """Get an object"""
            return self._objects[name]

        def get_objects(self):
            """Get all objects"""
            return self._objects

        def register_object(self, name, obj):
            """Register an object"""
            self._objects[name] = obj

        def unregister_object(self, name):
            """Unregister an object"""
            del self._objects[name]


    if __name__ == '__main__':
        dispatcher = PrototypeDispatcher()
        prototype = Prototype()

        dispatcher.register_object('prototype', prototype)

        a = dispatcher.get_object('prototype').clone(value='a-value')
        b = dispatcher.get_object('prototype').clone(value='b-value')

        dispatcher.register_object('obj_a', a)
        dispatcher.register_object('obj_b', b)

        print([{n: p.value} for n, p in dispatcher.get_objects().items()])
  #+END_SRC
  
  执行结果：
  #+BEGIN_EXAMPLE
    [{'prototype': 'default'}, {'obj_a': 'a-value'}, {'obj_b': 'b-value'}]
  #+END_EXAMPLE

