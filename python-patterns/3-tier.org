#+TITLE:      3-tier
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#文档][文档]]
- [[#代码][代码]]
- [[#输出][输出]]
- [[#理解][理解]]

* 文档
  #+BEGIN_SRC python
    """
    *TL;DR80
    Separates presentation, application processing, and data management functions.
    """
  #+END_SRC

* 代码
  #+BEGIN_SRC python
    class Data(object):
        """ Data Store Class """

        products = {
            'milk': {'price': 1.50, 'quantity': 10},
            'eggs': {'price': 0.20, 'quantity': 100},
            'cheese': {'price': 2.00, 'quantity': 10}
        }

        def __get__(self, obj, klas):
            print("(Fetching from Data Store)")
            return {'products': self.products}


    class BusinessLogic(object):
        """ Business logic holding data store instances """

        data = Data()

        def product_list(self):
            return self.data['products'].keys()

        def product_information(self, product):
            return self.data['products'].get(product, None)


    class Ui(object):
        """ UI interaction class """

        def __init__(self):
            self.business_logic = BusinessLogic()

        def get_product_list(self):
            print('PRODUCT LIST:')
            for product in self.business_logic.product_list():
                print(product)
            print('')

        def get_product_information(self, product):
            product_info = self.business_logic.product_information(product)
            if product_info:
                print('PRODUCT INFORMATION:')
                print('Name: {0}, Price: {1:.2f}, Quantity: {2:}'.format(
                    product.title(), product_info.get('price', 0),
                    product_info.get('quantity', 0)))
            else:
                print('That product "{0}" does not exist in the records'.format(
                    product))


    def main():
        ui = Ui()
        ui.get_product_list()
        ui.get_product_information('cheese')
        ui.get_product_information('eggs')
        ui.get_product_information('milk')
        ui.get_product_information('arepas')

    if __name__ == '__main__':
        main()
  #+END_SRC

* 输出
  #+BEGIN_EXAMPLE
    ### OUTPUT ###
    # PRODUCT LIST:
    # (Fetching from Data Store)
    # cheese
    # eggs
    # milk
    #
    # (Fetching from Data Store)
    # PRODUCT INFORMATION:
    # Name: Cheese, Price: 2.00, Quantity: 10
    # (Fetching from Data Store)
    # PRODUCT INFORMATION:
    # Name: Eggs, Price: 0.20, Quantity: 100
    # (Fetching from Data Store)
    # PRODUCT INFORMATION:
    # Name: Milk, Price: 1.50, Quantity: 10
    # (Fetching from Data Store)
    # That product "arepas" does not exist in the records
  #+END_EXAMPLE

* 理解
  *三层架构* 分为： *表示层*, *逻辑层* 和 *数据层*.

  使用时， *数据层* 存储处理数据， 而 *逻辑层* 调用 *数据层* 的数据执行相应的业务逻辑。

  *表示层* 可以直接访问， 调用者通过 *表示层* 完成相应任务二不需要关系低层逻辑。

  #+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    class Data(object):
        """Data Store Class."""
        products = dict()

        def __get__(self, obj, obj_type):
            return self.products.get(obj)

        def __set__(self, obj, value):
            if obj not in self.products:
                self.products[obj] = []
            self.products[obj].append(value)

        def __delete__(self, obj):
            del self.products[obj]


    class BusinessLogic(object):
        """Business logic holding data store instances."""
        data = Data()

        def product_put(self, data):
            self.data = data

        def product_list(self):
            return self.data


    class Ui(object):
        """UI interaction class."""
        def __init__(self):
            self.business_logic = BusinessLogic()

        def put_product(self, product):
            self.business_logic.product_put(product)

        def get_product_list(self):
            print('PRODUCT LIST:')
            print(self.business_logic.product_list())


    if __name__ == '__main__':
        ui = Ui()
        ui.put_product('a')
        ui.put_product('b')
        ui.put_product('c')
        ui.get_product_list()
  #+END_SRC

  执行结果：
  #+BEGIN_EXAMPLE
    PRODUCT LIST:
    ['a', 'b', 'c']
  #+END_EXAMPLE
