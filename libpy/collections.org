#+TITLE:      collections
#+AUTHOR:     rgb-24bit
#+EMAIL:      rgb-24bit@foxmail.com

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#import][import]]
- [[#userdict][UserDict]]
- [[#userlist][UserList]]
- [[#userstring][UserString]]
- [[#相关链接][相关链接]]

* import
  #+BEGIN_SRC python
    ...
    # https://docs.python.org/3/library/operator.html#operator.itemgetter
    # def itemgetter(*items):
    #     if len(items) == 1:
    #         item = items[0]
    #         def g(obj):
    #             return obj[item]
    #     else:
    #         def g(obj):
    #             return tuple(obj[item] for item in items)
    #     return g
    from operator import itemgetter as _itemgetter, eq as _eq

    ...

    # https://docs.python.org/3.7/library/keyword.html
    # 可以用于判断一个字符串是否为关键字
    from keyword import iskeyword as _iskeyword

    ...

    # https://docs.python.org/3/library/reprlib.html#module-reprlib
    # repr() 的替代实现
    from reprlib import recursive_repr as _recursive_repr

    ...
  #+END_SRC

  Python 各种库是真滴多......

* UserDict
  UserDict 和默认的 Dict 之间还是存在一些区别的，之前一直没什么感觉，直到这一段代码的出现：
  #+BEGIN_SRC python
    class NestedDict(dict):
        """Automated nested dictionary.

        >>> nd = NestedDict()
        >>> nd['a']['b']['c'] = 1
        >>> nd
        {'a': {'b': {'c': 1}}}
        """
        def __getitem__(self, key):
            return self.setdefault(key, self.__class__())
  #+END_SRC

  上面这段代码中，如果继承的是 UserDict, 就会陷入无限递归。
  
  + [[https://github.com/python/cpython/blob/master/Lib/collections/__init__.py#L999][class UserDict(_collections_abc.MutableMapping)]]

  说起来，UserDict 的本身的源码还是很简单的，上面问题的来源还是需要看一下父类的代码。

  哈，问题就在这里：
  #+BEGIN_SRC python
    def setdefault(self, key, default=None):
        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
        try:
            return self[key]
        except KeyError:
            self[key] = default
        return default
  #+END_SRC

  感觉 UserDict 可以覆盖 setdefault 方法和 get 方法：
  #+BEGIN_SRC python
    def get(self, key, default=None):
        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
        try:
            return self[key]
        except KeyError:
            return default

    # ------------------------------------------------------------------------------

    def setdefault(self, key, default=None):
        return self.data.setdefault(key, default)

    def get(self, key, default=None):
        return self.data.get(key, default)
  #+END_SRC

  或者，编写 UserDict 的子类的时候注意......
  #+BEGIN_SRC python
    class NestedDict(UserDict):
        def __getitem__(self, key):
            return self.data.setdefault(key, self.__class__())
  #+END_SRC

  好吧，官方文档还真有提示： [[https://docs.python.org/3/library/collections.html#collections.UserDict][class collections.UserDict({initialdata})]]

* UserList
  UserList 和 UserDict 的实现方式差不多，比较有趣的是几个方法的实现，反正看到源码后瞬间幻灭了：
  #+BEGIN_SRC python
    def append(self, value):
        'S.append(value) -- append value to the end of the sequence'
        self.insert(len(self), value)

    def clear(self):
        'S.clear() -> None -- remove all items from S'
        try:
            while True:
                self.pop()
        except IndexError:
            pass

    def extend(self, values):
        'S.extend(iterable) -- extend sequence by appending elements from the iterable'
        if values is self:
            values = list(values)
        for v in values:
            self.append(v)
  #+END_SRC

  这几个是 ~MutableSequence~ 中的实现，UserList 中这几个方法都用 data 字段的方法实现。

  不过这个实现还是可以看一下，这种用法可以：
  #+BEGIN_SRC python
    def count(self, value):
        'S.count(value) -> integer -- return number of occurrences of value'
        return sum(1 for v in self if v is value or v == value)
  #+END_SRC

  值得一提的是，UserList 内部所有方法的实现都是调用 data 字段的方法，为什么，UserDict 会有那么两个方法不是这样的呢？

  + [[https://github.com/python/cpython/blob/master/Lib/collections/__init__.py#L1066][class UserList(_collections_abc.MutableSequence)]]

* UserString
  UserString 就没什么好说的了，源码简单而又直白：
  + [[https://github.com/python/cpython/blob/master/Lib/collections/__init__.py#L1139][class UserString(_collections_abc.Sequence)]]

  所以说，为什么，唯独 UserDict 存在两个方法不是通过调用 data 字段的方法实现呢？

* 相关链接
  + [[https://docs.python.org/3/library/collections.html][collections — Container datatypes]]
  + [[https://github.com/python/cpython/blob/master/Lib/collections/__init__.py][collections - source code]]
  + [[https://github.com/python/cpython/blob/master/Lib/_collections_abc.py][_collections_abc source code]]
  + [[https://github.com/python/cpython/blob/master/Modules/_collectionsmodule.c][_collectionsmodule C source code]]
