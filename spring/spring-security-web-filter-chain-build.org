#+TITLE:      Spring Security Web 过滤器链的构建

* 目录                                                    :TOC_4_gh:noexport:
- [[#前言][前言]]
- [[#过滤器链的构建][过滤器链的构建]]
  - [[#springsecurityfilterchain][SpringSecurityFilterChain]]
  - [[#websecurityconfigurer][WebSecurityConfigurer]]
  - [[#websecuritybuild][WebSecurity.build()]]
  - [[#websecurityconfigureradapter][WebSecurityConfigurerAdapter]]
  - [[#httpsecurity][HttpSecurity]]
  - [[#defaultsecurityfilterchain][DefaultSecurityFilterChain]]
  - [[#simple-summary][Simple summary]]
- [[#过滤器链的调用][过滤器链的调用]]
- [[#结语][结语]]
- [[#footnotes][Footnotes]]

* 前言
  Spring Security 是一个 *多模块* 的项目，不同模板提供的功能时不一样的，其中，核心模块提供的时基本的和认证与授权相关的功能，
  比如 ~AuthenticationManager~ 和 ~AccessDecisionManager~ 就是来源于核心模块。

  而 Spring Security Web 模块，则是通过过滤器链的方式将认证和授权相关的功能组织了起来，包围在我们要访问的端点外。

* 过滤器链的构建
** SpringSecurityFilterChain
   使用 Spring Security Web 时，常常会通过 ~@EnableWebSecurity~ 注解来启用 Spring Security，而这个注解会导入 ~WebSecurityConfiguration~ 这个配置类：
   #+begin_src java
     @Import({ WebSecurityConfiguration.class, SpringWebMvcImportSelector.class, OAuth2ImportSelector.class })
     public @interface EnableWebSecurity {}
   #+end_src

   这个配置类中会构建一个名为 ~springSecurityFilterChain~ 类型为 ~FilterChainProxy~ 的过滤器[fn:1]，后续的请求都会经由这个过滤器分派到各个过滤器链：
   #+begin_src java
     public class WebSecurityConfiguration implements ImportAware, BeanClassLoaderAware {
       public Filter springSecurityFilterChain() throws Exception {
         boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty();
         if (!hasConfigurers) {
           WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor.postProcess(new WebSecurityConfigurerAdapter() {});
           webSecurity.apply(adapter);
         }
         return webSecurity.build();
       }
     }
   #+end_src

** WebSecurityConfigurer
  过滤器 ~springSecurityFilterChain~ 的构建是根据上下文中的各个 ~WebSecurityConfigurer~ 来完成的，那么，在进行构建之前，需要完成的操作就是得到上下文中的 WebSecurityConfigurer 并注入 WebSecurity 实例。

  这一步是由方法 ~WebSecurityConfiguration.setFilterChainProxySecurityConfigurer~ 来完成的：
  #+begin_src java
    @Autowired(required = false)
    public void setFilterChainProxySecurityConfigurer(
      ObjectPostProcessor<Object> objectPostProcessor,
      @Value("#{@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers()}") List<SecurityConfigurer<Filter, WebSecurity>> webSecurityConfigurers)
      throws Exception {
      webSecurity = objectPostProcessor.postProcess(new WebSecurity(objectPostProcessor));

      for (SecurityConfigurer<Filter, WebSecurity> webSecurityConfigurer : webSecurityConfigurers) {
        webSecurity.apply(webSecurityConfigurer);
      }

      this.webSecurityConfigurers = webSecurityConfigurers;
    }
  #+end_src

  可以看到，这个方法要求注入 ~objectPostProcessor~ 和 ~webSecurityConfigurers~, 其中，objectPostProcessor 由 ~EnableWebSecurity~ 层层导入的配置类 ~ObjectPostProcessorConfiguration~ 创建，
  而 ~webSecurityConfigurers~ 则是通过 ~autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers()~ 方法获得。

  其中，autowiredWebSecurityConfigurersIgnoreParents 这个 Bean 是由 ~WebSecurityConfiguration.autowiredWebSecurityConfigurersIgnoreParents~ 方法创建的：
  #+begin_src java
    @Bean
    public static AutowiredWebSecurityConfigurersIgnoreParents autowiredWebSecurityConfigurersIgnoreParents(ConfigurableListableBeanFactory beanFactory) {
      return new AutowiredWebSecurityConfigurersIgnoreParents(beanFactory);
    }
  #+end_src
  
  它的 ~getWebSecurityConfigurers()~ 方法的代码：
  #+begin_src java
    public List<SecurityConfigurer<Filter, WebSecurity>> getWebSecurityConfigurers() {
      List<SecurityConfigurer<Filter, WebSecurity>> webSecurityConfigurers = new ArrayList<SecurityConfigurer<Filter, WebSecurity>>();
      Map<String, WebSecurityConfigurer> beansOfType = beanFactory.getBeansOfType(WebSecurityConfigurer.class);
      for (Entry<String, WebSecurityConfigurer> entry : beansOfType.entrySet()) {
        webSecurityConfigurers.add(entry.getValue());
      }
      return webSecurityConfigurers;
    }
  #+end_src

** WebSecurity.build()
   根据从上下文中得到的 ~WebSecurityConfigurer~ 最终会通过方法 ~WebSecurity.build()~ 构建 FilterChainProxy，这个方法的部分关键逻辑 ：
   #+begin_src java
     public abstract class AbstractConfiguredSecurityBuilder<O, B extends SecurityBuilder<O>> extends AbstractSecurityBuilder<O> {
       protected final O doBuild() throws Exception {
         synchronized (configurers) {
           buildState = BuildState.INITIALIZING;

           // 执行初始化
           init();

           buildState = BuildState.CONFIGURING;

           // 进行配置
           configure();

           buildState = BuildState.BUILDING;

           // 构建对象
           O result = performBuild();

           buildState = BuildState.BUILT;

           return result;
         }
       }

       private void init() throws Exception {
         // 这里的 SecurityConfigurer 通常为 WebSecurityConfigurerAdapter
         for (SecurityConfigurer<O, B> configurer : configurers) {
           configurer.init((B) this);
         }
       }

       private void configure() throws Exception {
         Collection<SecurityConfigurer<O, B>> configurers = getConfigurers();

         // 这里的 SecurityConfigurer 通常为 WebSecurityConfigurerAdapter
         for (SecurityConfigurer<O, B> configurer : configurers) {
           configurer.configure((B) this);
         }
       }

       private Collection<SecurityConfigurer<O, B>> getConfigurers() {
         List<SecurityConfigurer<O, B>> result = new ArrayList<SecurityConfigurer<O, B>>();
         for (List<SecurityConfigurer<O, B>> configs : this.configurers.values()) {
           result.addAll(configs);
         }
         return result;
       }

       // 这里的是 WebSecurity 的实现，为了方便就移到这里来了
       protected Filter performBuild() throws Exception {
         int chainSize = ignoredRequests.size() + securityFilterChainBuilders.size();
         List<SecurityFilterChain> securityFilterChains = new ArrayList<>(chainSize);

         for (RequestMatcher ignoredRequest : ignoredRequests) {
           securityFilterChains.add(new DefaultSecurityFilterChain(ignoredRequest));
         }

         // 这里的 SecurityBuilder 是在执行 init() 时添加的
         for (SecurityBuilder<? extends SecurityFilterChain> securityFilterChainBuilder : securityFilterChainBuilders) {
           securityFilterChains.add(securityFilterChainBuilder.build());
         }

         FilterChainProxy filterChainProxy = new FilterChainProxy(securityFilterChains);

         postBuildAction.run();

         return result;
       }
     }
   #+end_src

   可以看到，方法 ~init()~ 和 ~configure()~ 都是在调用 ~WebSecurityConfigurer~ 中的实现，而 ~performBuild()~ 则是使用 ~SecurityBuilder~ 构建了过滤器链并添加到 ~FilterChainProxy~ 中，
   这里的问题就是 ~SecurityBuilder~ 的来源了。

   由于 ~WebSecurityConfigurer~ 的通常实现为 ~WebSecurityConfigurerAdapter~ 这个类，因此，关键逻辑其实就在 ~WebSecurityConfigurerAdapter~ 中了。

** WebSecurityConfigurerAdapter
   ~WebSecurityConfigurerAdapter~ 是 ~WebSecurityConfigurer~ 的通常实现，其中包含了一些重要的逻辑：
   #+begin_src java
     public abstract class WebSecurityConfigurerAdapter implements WebSecurityConfigurer<WebSecurity> {
       private HttpSecurity http;

       protected final HttpSecurity getHttp() throws Exception {
         http = new HttpSecurity(objectPostProcessor, authenticationBuilder, sharedObjects);
         configure(http);  // 通常为我们覆盖后的配置
         return http;
       }

       public void init(final WebSecurity web) throws Exception {
         final HttpSecurity http = getHttp();

         // 这里将 HttpSecurity 添加到了 WebSecurity
         web.addSecurityFilterChainBuilder(http).postBuildAction(new Runnable() {
             public void run() {
               // 获取共享的 FilterSecurityInterceptor 对象
               FilterSecurityInterceptor securityInterceptor = http.getSharedObject(FilterSecurityInterceptor.class);
               // 这里会将 FilterSecurityInterceptor 添加到过滤器链，用于最后的鉴权
               web.securityInterceptor(securityInterceptor);
             }
           });
       }

       public void configure(WebSecurity web) throws Exception {}

       // 这个方法通常由我们进行覆盖
       protected void configure(HttpSecurity http) throws Exception {}
     }
   #+end_src

   可以看到，关键的方法其实是 ~init()~ 这个方法，这个方法会创建一个 ~HttpSecurity~ 并调用用户自己的实现（或者默认实现）进行配置，然后将 ~HttpSecurity(SecurityBuilder)~ 添加到 ~WebSecurity~ 中。

   PS: 调用 HttpSecurity 的 authorizeRequests 方法时会将 ExpressionUrlAuthorizationConfigurer 放入 HttpSecurity，这个最后会创建 FilterSecurityInterceptor 放入 HttpSecurity。

** HttpSecurity
   经过一系列的调用，过滤器链的配置和调用最终其实落在了 ~HttpSecurity~ 这个类身上，由于这个类本身也是一个 SecurityBuilder，因此，使用它构建对象最终也会经过一系列调用到达它的 ~performBuild()~ 方法：
   #+begin_src java
     public final class HttpSecurity {
       protected DefaultSecurityFilterChain performBuild() throws Exception {
         Collections.sort(filters, comparator);
         return new DefaultSecurityFilterChain(requestMatcher, filters);
       }
     }
   #+end_src

   这个方法最终会将我们配置的过滤器排序，创建 ~DefaultSecurityFilterChain~ 这个过滤器链。

   除了 ~performBuild()~ 这个方法以外，HttpSecurity 还包含用于添加自定义过滤器的方法，比如 ~addFilter()~ 等。也包含用于配置标准过滤器的方法，比如 ~csrf()~ 等。

   这些标准过滤器的添加会添加 ~AbstractHttpConfigurer~ 到 HttpSecurity，构建的时候就又是一套 ~WebSecurity~ 的逻辑，只不过，这里会简化很多，因为它们通常只实现了 ~configure~ 方法来添加过滤器，
   这和 ~WebSecurityConfigurerAdapter~ 只没有实现 ~configure~ 方法恰恰相反：
   #+begin_src java
     public void configure(H http) throws Exception {
       CsrfFilter filter = new CsrfFilter(this.csrfTokenRepository);
       // ...
       http.addFilter(filter);
     }
   #+end_src

** DefaultSecurityFilterChain
   ~DefaultSecurityFilterChain~ 这个类其实还是很简单的，就是简单的保存过滤器链中的过滤器和路径配置，提供了 ~matches~ 这些方法：
   #+begin_src java
     public final class DefaultSecurityFilterChain implements SecurityFilterChain {
       private final RequestMatcher requestMatcher;
       private final List<Filter> filters;

       public DefaultSecurityFilterChain(RequestMatcher requestMatcher, List<Filter> filters) {
         this.requestMatcher = requestMatcher;
         this.filters = new ArrayList<>(filters);
       }

       public List<Filter> getFilters() {
         return filters;
       }

       public boolean matches(HttpServletRequest request) {
         return requestMatcher.matches(request);
       }
     }
   #+end_src

** Simple summary
   构建过滤器链相关的源码是真的不好读，调试的时候断点就在 ~build()~ 附件反复横跳。还容易受到各种抽象类和接口的干扰……

   构建过滤器链时最主要的几类对象：
   + ~WebSecurity~ 根据上下文中的 ~WebSecurityConfigurer~ 配置来构建过滤器链
   + ~WebSecurityConfigurer~ 的通常实现为 ~WebSecurityConfigurerAdapter~, 其中包含了 Spring Security Core 相关的配置和 ~HttpSecurity~
   + ~HttpSecurity~ 用于单个过滤器链配置和构建，标准过滤器大都可以通过 ~AbstractHttpConfigurer~ 实现类进行配置和构建

   大致的一个时序图如下：
   #+begin_src plantuml :exports none
     @startuml
     group WebSecurityConfiguration.springSecurityFilterChain()

       WebSecurityConfiguration -> WebSecurity ++: invoke build()

       group WebSecurity.init()

         loop Each WebSecurityConfigurerAdapter
           WebSecurity -> WebSecurityConfigurerAdapter: invoke init()
           WebSecurityConfigurerAdapter -> HttpSecurity ++: new() && custom()
           HttpSecurity -> HttpSecurityConfigurer ++: new() && custom()
           return HttpSecurityConfigurer
           return HttpSecurity
           WebSecurityConfigurerAdapter -> WebSecurity: invoke addSecurityFilterChainBuilder(HttpSecurity)
         end

       end

       group WebSecurity.configure()

         loop Each WebSecurityConfigurerAdapter
           WebSecurity -> WebSecurityConfigurerAdapter: invoke configure(WebSecurity)
           note right: Usually customized by the user
         end

       end

       group WebSecurity.performBuild()

         loop Each HttpSecurity

           WebSecurity -> HttpSecurity ++: invoke build()

           loop Each HttpSecurityConfigurer
             HttpSecurity -> HttpSecurityConfigurer: init() && configure()
             HttpSecurityConfigurer -> HttpSecurity: addFilter(Filter)
           end

           HttpSecurity -> HttpSecurity: invoke performBuild()

           return DefaultSecurityFilterChain

         end

       end

       return FilterChainProxy

     end
     @enduml
   #+end_src

   #+HTML: <img src="https://i.loli.net/2019/11/01/573eMSbcNmE9ALo.png">

   这是一个很复杂的构建流程，这个复杂过程的起点大概就在将 ~HttpSecurity~ 添加到 ~WebSecurity~ 后，执行 ~WebSecurity~ 的 ~performBuild~ 方法时，又会调用 ~HttpSecurity~ 的 ~build~ 方法，
   然后就又是一套构建逻辑。

   即：构建 FilterChainProxy -> 执行 WebSecurity 的构建逻辑 -> 执行 HttpSecurity 的构建逻辑……

* 过滤器链的调用
  过滤器链的调用过程就要简单多了，主要就在 ~FilterChainProxy~ 这个过滤器里面：
  #+begin_src java
    public class FilterChainProxy extends GenericFilterBean {
      private final static String FILTER_APPLIED = FilterChainProxy.class.getName().concat(".APPLIED");

      private List<SecurityFilterChain> filterChains;

      public FilterChainProxy(List<SecurityFilterChain> filterChains) {
        this.filterChains = filterChains;
      }

      @Override
      public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        boolean clearContext = request.getAttribute(FILTER_APPLIED) == null;
        if (clearContext) {
          try {
            request.setAttribute(FILTER_APPLIED, Boolean.TRUE);
            doFilterInternal(request, response, chain);
          }
          finally {
            SecurityContextHolder.clearContext();
            request.removeAttribute(FILTER_APPLIED);
          }
        }
        else {
          doFilterInternal(request, response, chain);
        }
      }

      private void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

        FirewalledRequest fwRequest = firewall.getFirewalledRequest((HttpServletRequest) request);
        HttpServletResponse fwResponse = firewall.getFirewalledResponse((HttpServletResponse) response);

        List<Filter> filters = getFilters(fwRequest);

        if (filters == null || filters.size() == 0) {
          fwRequest.reset();

          chain.doFilter(fwRequest, fwResponse);

          return;
        }

        // VirtualFilterChain 一个过滤器链的实现，这个类的内部类
        VirtualFilterChain vfc = new VirtualFilterChain(fwRequest, chain, filters);
        vfc.doFilter(fwRequest, fwResponse);
      }

      // 获取匹配的过滤器链
      private List<Filter> getFilters(HttpServletRequest request) {
        for (SecurityFilterChain chain : filterChains) {
          if (chain.matches(request)) {
            return chain.getFilters();
          }
        }
        return null;
      }
    }
  #+end_src

  这个流程真的很简单，就是遍历持有的过滤器链判断是否匹配，匹配就调用该过滤器链进行处理，后续过滤器链忽略。

  更多的逻辑其实就在过滤器链内部的过滤器中，而不是过滤器链的调用。

* 结语
  Spring Security Web 构建过滤器链的过程已经有了大致的了解，但是对于每个过滤器的构建还不是很清楚，特别是标准过滤器器。

  其中，FilterSecurityInterceptor 这个过滤器的构建估计是最复杂的，因为涉及到了 AccessDecisionManager 相关对象的创建。

  但是，这些过滤器是怎么构建的目前来说并不是很重要，相对的，这些过滤器链的作用、内部逻辑更重要一些……

* Footnotes

[fn:1] 这个过滤器的生命周期将会通过 ~DelegatingFilterProxy~ 托管给 Spring IOC 容器，详情可见 ~FilterChainProxy~ 和 ~DelegatingFilterProxy~ 的文档

